Micro-controller Based Electrical Appliance Control
The system is fully controlled by the 8 bit microcontroller AT89C2051 which has a 2Kbytes of ROM for program memory. The password is stored in EPROM and can be changed anytime. Keypad is used to enter the password as well as perform required operations. Appliances controlled are a LED Lamp, a DC Motor, whose direction is controlled too, and a buzzer. LCD is used to display menu.
Source Code is in C
Software used: Keil uVision

 #include<reg51.h>
//LCD Declarations
sbit buzzer=P3^6;
sfr LCD=0x90;
sbit RS=P3^5;
sbit EN=P3^4;

//Keypad declarations;
unsigned int i=0;
unsigned char keyf[4][4]={{‘1’,’2’,’3’},
{‘4’,’5’,’6’},
{‘7’,’8’,’9’},
{‘A’,’0’,’B’}};
sbit row1=P2^0;
sbit row2=P2^1;
sbit row3=P2^2;
sbit row4=P2^3;
sbit row1=P2^4;
sbit row2=P2^5;
sbit row3=P2^6;
char m_1;
sbit motor_lock_pin1=P3^0;
sbit motor_lock_pin2=P3^1;
sbit lamp_lock_pin=P3^7;
int w;
char motor_lamp=1357;
char motor_code=1234;
char lamp_code=2468;
char getch(void);
void exit();
void motor_menu();
void error1();
void initialize(void);
void rowa();
void rowb();
void rowc();
void main_menu(void);
unsigned char key_lcd(void);
void lcd_cmd(unsigned char);
void lcd_data(unsigned char);
void delay(void);
void error();
int getpasscode(char);
void lcd_motor(char);
void lcd_lamp(void);
void showopened();
unsigned char key1, keyz, keys, option1, option, ke;
char motor, lamp;
int c=0;

//Main
void main()
{
buzzer=0;
P1=0x00;
motor_lock_pin1=0;
motor_lock_pin2=0;
lamp_lock_pin=0;
lcd_cmd(0x08);
do {
ke=kgetch();
} while(ke!=’*’);
initialize();
labelA: main_menu();
option=kgetch();
if(option==’A’)
     lcd_data(‘*’);
else if(option==’B’)
    lcd_data(‘#’);
else
    lcd_data(option);
delay();
labelB:
if (option==’1’)
{
motor=getpasscode(option);
goto labelE;
}      
else if(option==‘2‘)
{
lamp=getpasscode(option);
goto labelK;
}
else if (option==‘3‘)
{
labelO: m_1= getpasscode(‘6‘);
if(m_1==motor_lamp)
{
motor_lock_pin1=1;
motor_lock_pin2=0;
lamp_lock_pin=1;
showopened();
goto labelA;
}
else
{
c++;
if(c>2)
{
error1();
}
else
{error();
goto labelO;
}
}
}
else if(option==’4’)
{
exit();
goto labelA;
}
else if( option!=’1’ && option!=’2’ && option !=’3’ && option !=’4’)
goto labelA;
labelE: if(motor==motor_code)
{
motor_menu();
option1=kgetch();
labelM: if(option1==’1’)
{
motor_lock_pin1=1;
motor_lock_pin2=0;
showopened();
goto labelA;
}
else if(option1==’2’)
{
motor_lock_pin1=0;
motor_lock_pin2=1;
showopened();
goto labelA;
}
else
{
goto labelE;
}
}
else
{
c++;
if(c>2)
{
error1();
}
else
{
error();
goto labelB;
}
}
labelK: if(lamp==lamp_code)
{
lamp_lock_pin=1;
showopened();
goto labelA;
}
else
{
c++;
if(c>2)
{error1();
}
else{
error();
goto labelB;
}
}
}
void initialise()
{
lcd_cmd(0x38);
lcd_cmd(0x0E);
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x84);
lcd_data(‘W’);
lcd_data(‘E’);
lcd_data(‘L’);
lcd_data(‘C’);
lcd_data(‘W’);
lcd_data(‘O’);
lcd_data(‘M’);
lcd_data(‘E’);
delay();
rowa();
}
void rowa()
{
delay();
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x81);
lcd_data(‘P’);
lcd_data(‘R’);
lcd_data(‘E’);
lcd_data(‘S’);
lcd_data(‘S’);
lcd_data(‘ ’);
lcd_data(‘*’);
lcd_data(‘ ’);
lcd_cmd(0xC2);
lcd_data(‘C’);
lcd_data(‘O’);
lcd_data(‘N’);
lcd_data(‘T’);
lcd_data(‘I’);
lcd_data(‘N’);
lcd_data(‘U’);
lcd_data(‘E’);
do
{
key1=kgetcg();
}while( key1!=’A’);
}
void rowc()
{
delay();
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x81);
lcd_data(‘P’);
lcd_data(‘R’);
lcd_data(‘E’);
lcd_data(‘S’);
lcd_data(‘S’);
lcd_data(‘ ’);
lcd_data(‘*’);
lcd_data(‘ ’);
lcd_data(‘T’);
lcd_data(‘O’);
lcd_data(‘ ’);
lcd_cmd(‘0xC2 ’);
lcd_data(‘S’);
lcd_data(‘T’);
lcd_data(‘O’);
lcd_data(‘P’);
do
{
key1=kgetch();
}while(key!=’A’);
}
void main_menu()
{
delay();
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x81);
lcd_data(‘1’);
lcd_data(‘.’);
lcd_data(‘M’);
lcd_data(‘O’);
lcd_data(‘T’);
lcd_data(‘O’);
lcd_data(‘R’);
lcd_data(‘ ’);
lcd_data(‘2’);
lcd_data(‘.’);
lcd_data(‘L’);
lcd_data(‘A’);
lcd_data(‘M’);
lcd_data(‘P’);
lcd_data(‘ ’);
lcd_cmd(‘0xC1’);
lcd_data(‘3’);
lcd_data(‘.’);
lcd_data(‘B’);
lcd_data(‘O’);
lcd_data(‘T’);
lcd_data(‘H’);
lcd_data(‘ ’);
lcd_cmd(‘0xC9’);
lcd_data(‘4’);
lcd_data(‘.’);
lcd_data(‘E’);
lcd_data(‘X’);
lcd_data(‘I’);
lcd_data(‘T’);
lcd_data(‘ ’);
}
void motor_menu()
{ 
delay();
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x81);
lcd_data(‘S’);
lcd_data(‘E’);
lcd_data(‘L’);
lcd_data(‘E’);
lcd_data(‘C’);
lcd_data(‘T’);
lcd_data(‘ ’);
lcd_data(‘1’);
lcd_data(‘.’);
lcd_data(‘C’);
lcd_data(‘L’); 
lcd_data(‘K’);
 lcd_cmd(0xC8); 
lcd_data(‘2’);
lcd_data(‘.’);
lcd_data(‘A’);
lcd_data(‘C’);
lcd_data(‘L’); 
lcd_data(‘K’);
}
void lcd_cmd(unsigned char val)  //LCD command
{
RS=0;
LCD=val;
EN=1;
delay();
EN=0;
}
void lcd_data(unsigned char val) //LCD data
{
RS=1;
LCD=val;
EN=1;
delay();
EN=0;
}
void delay()
{
int u,b;
for(u=0;u<30;u++)
for(b=0;b<1275;b++);
}
void error()
{
lcd_cmd(0x01);
lcd_cmd(0x81);
lcd_data(‘I’);
lcd_data(‘N’);
lcd_data(‘V’);
lcd_data(‘A’);
lcd_data(‘L’);
lcd_data(‘I’);
lcd_data(‘D’);
lcd_data(‘ ’);
lcd_data(‘E’);
lcd_data(‘N’);
lcd_data(‘T’);
lcd_data(‘R’);
lcd_data(‘Y’);
delay();
}
int getpasscode(char x)
{
unsigned char ctr=0;
char curchar;
unsigned int value=0;
lcd_cmd(0x80);
if(x==’1’||x==’3’||x==’4’||x==’6’)
lcd_motor(x);
else if(x==’2’)
lcd_lamp();
do
{
lcd_cmd(0xc0);
delay();
do
{
V: curchar=kgetch();
if(curchar==’B’)
{
lcd_cmd(0x10);
lcd_data(‘ ‘);
ctr--;
lcd_cmd(0x10);
value=(value/10);
goto V;
}
else if (curchar>=’0’ && curchar<=’9’/*&&curchar !=’B’*/)
{
value*=10;
value+=curchar-‘0’;
lcd_data(‘*’);
delay();
delay();
ctr++;
}
}
while(curchar!=’A’&& ctr<4);
} while(curchar==’A’);
return value;
}
void lcd_motor(char t)
{
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x81);
if(t==’1’)
{
lcd_data(‘M’);
lcd_data(‘O’);
lcd_data(‘T’);
lcd_data(‘O’);
lcd_data(‘R’);
lcd_data(‘ ’);
}
lcd_data(‘P’);
lcd_data(‘A’);
lcd_data(‘S’);
lcd_data(‘S’);
lcd_data(‘K’);
lcd_data(‘E’);
lcd_data(‘Y’);
lcd_data(0xC0);
}
void lcd_lamp()
{ 
lcd_cmd(0x01);
lcd_cmd(0x06);
lcd_cmd(0x81);
lcd_data(‘L’);
lcd_data(‘A’);
lcd_data(‘M’);
lcd_data(‘P’);
lcd_data(‘ ’);
lcd_data(‘P’);
lcd_data(‘A’);
lcd_data(‘S’);
lcd_data(‘S’);
lcd_data(‘K’);
lcd_data(‘E’);
lcd_data(‘Y’);
lcd_data(0xC0);
}
void showopened()
{
lcd_cmd(0x01);
lcd_cmd(0x81);
delay();
lcd_data(‘D’);
lcd_data(‘E’);
lcd_data(‘V’);
lcd_data(‘I’);
lcd_data(‘C’);
lcd_data(‘E’);
lcd_data(‘ ’);
lcd_data(‘I’);
lcd_data(‘S’);
lcd_data(‘ ’);
lcd_data(‘O’);
lcd_data(‘N’);
lcd_data(0xC0);
rowc();
motor_lock_pin1=0;
motor_lock_pin2=0;
lamp_lock_pin=0;
}
void exit()
{
int u;
lcd_cmd(0x01);
lcd_cmd(0x83);
lcd_data(‘T’);
lcd_data(‘H’);
lcd_data(‘A’);
lcd_data(‘N’);
lcd_data(‘K’);
lcd_data(‘ ’);
lcd_data(‘Y’);
lcd_data(‘O’);
lcd_data(‘U’);
lcd_data(‘!’);
delay();
lcd_cmd(0x01);
lcd_cmd(0x08);
do
{
ke=kgetch();
}  while(ke!=’A’);
}
//Keypad
char kgetch(void)
{
unsigned int i=0;   //Scanning for Row value
P2=0x0F;                //Initialize Port0 to 0F
col1=col2=col3=1;
while(1)
{
row1=0;
row2=row3=row4=1;
if(col1==0|col2==0|col3==0)
{
if(col1==0)
{return keyf[0][0];
}
else if(col2==0)
{return keyf[0][1];
}
else if(col3==0)
{return keyf[0][2];
}
}
row2=0;
row1=row3=row4=1;
if(col1==0|col2==0|col3==0)
{
if(col1==0)
{return keyf[1][0];
}
else if(col2==0)
{return keyf[1][1];
}
else if(col3==0)
{return keyf[1][2];
}
}
row3=0;
row1=row2=row4=1;
if(col1==0|col2==0|col3==0)
{
if(col1==0)
{return keyf[2][0];
}
else if(col2==0)
{return keyf[2][1];
}
else if(col3==0)
{return keyf[2][2];
}
}
row4=0;
row1=row2=row3=1;
if(col1==0|col2==0|col3==0)
{
if(col1==0)
{return keyf[3][0];
}
else if(col2==0)
{return keyf[3][1];
}
else if(col3==0)
{return keyf[3][2];
}
}
}
}
void error1()
{ lcd_cmd(0x01);
lcd_cmd(0x08);
lcd_data(‘A’);
lcd_data(‘C’);
lcd_data(‘C’);
lcd_data(‘E’);
lcd_data(‘S’);
lcd_data(‘S’);
lcd_data(‘ ’);
lcd_data(‘D’);
lcd_data(‘E’);
lcd_data(‘N’);
lcd_data(‘I’);
lcd_data(‘E’);
lcd_data(‘D’);
delay();
lcd_cmd(0x01);
buzzer=1;
}

